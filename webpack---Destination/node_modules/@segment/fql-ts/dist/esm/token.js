// Loosely checks if something is a token type at runtime
export function isToken(arg) {
    return arg.type !== undefined && typeof arg.value === 'string';
}
// All available tokens forms
export var TokenType;
(function(TokenType) {
    TokenType["Err"] = "err";
    TokenType["Ident"] = "ident";
    TokenType["Dot"] = "dot";
    TokenType["Operator"] = "operator";
    TokenType["Conditional"] = "conditional";
    TokenType["String"] = "string";
    TokenType["Number"] = "number";
    TokenType["Null"] = "null";
    TokenType["BrackLeft"] = "brackleft";
    TokenType["BrackRight"] = "brackright";
    TokenType["ParenLeft"] = "parenleft";
    TokenType["ParenRight"] = "parenright";
    TokenType["Comma"] = "comma";
    TokenType["EOS"] = "eos";
})(TokenType || (TokenType = {}));
// Helper functions for creating typed Tokens
export const t = {
    Err: () => {
        return {
            type: TokenType.Err,
            value: 'err'
        };
    },
    Ident: (value) => {
        return {
            type: TokenType.Ident,
            value
        };
    },
    Dot: () => {
        return {
            type: TokenType.Dot,
            value: '.'
        };
    },
    Operator: (value) => {
        return {
            type: TokenType.Operator,
            value
        };
    },
    Conditional: (value) => {
        return {
            type: TokenType.Conditional,
            value
        };
    },
    String: (value) => {
        return {
            type: TokenType.String,
            value
        };
    },
    Number: (value) => {
        return {
            type: TokenType.Number,
            value
        };
    },
    Null: () => {
        return {
            type: TokenType.Null,
            value: 'null'
        };
    },
    BrackLeft: () => {
        return {
            type: TokenType.BrackLeft,
            value: '['
        };
    },
    BrackRight: () => {
        return {
            type: TokenType.BrackRight,
            value: ']'
        };
    },
    ParenLeft: () => {
        return {
            type: TokenType.ParenLeft,
            value: '('
        };
    },
    ParenRight: () => {
        return {
            type: TokenType.ParenRight,
            value: ')'
        };
    },
    Comma: () => {
        return {
            type: TokenType.Comma,
            value: ','
        };
    },
    EOS: () => {
        return {
            type: TokenType.EOS,
            value: 'eos'
        };
    }
};
//# sourceMappingURL=token.js.map